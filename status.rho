new sigVerify in {

  /**
   * Wrapper around ed25519Verify. Rather than returning bool on a single
   * ack channel, send ack on exactly one of success or failure channels
   */
  contract sigVerify(@data, @signature, @pubKey, success, failure) = {
    new goodSig in {
      @"ed25519Verify"!(data, signature, pubKey, *goodSig)|
      for (@true <- goodSig){success!(0)}|
      for (@false <- goodSig){failure!("Invalid Signature")}
    }
  }
  |

  /**
   * Users register by supplying a return channel. Contract returns
   * an unforgeable OCap called the "control panel" for updating status.
   * @param controlPanel a name on which the update and check contracts will be built
   * @param pubKey The ed25519 public key of the user as a hex string
   * @param signature ed25519 signature over controlPanel
   * @return 0 for success, or a human-readable error message
   */
  contract @"register"(@controlPanel, @pubKey, @signature, return) = {

    new goodSig in {
      sigVerify!(controlPanel, pubKey.hexToBytes(), signature.hexToBytes(), *goodSig, *return)|
      for (_ <- goodSig){

        new statusCh, pubKeyCh, nonceCh in {
          // Send the ack
          return!(0)|

          // Set the initial default status
          statusCh!("I'm new here! Haven't posted anything yet")|
          pubKeyCh!(pubKey.hexToBytes())|
          nonceCh!(0)|     // TODO should prolly have a checkNonce method in case user forgets it

          /**
           * Control panel OCap has a method  to set a new status
           * @param newStatus The new status (a string) that the user is posting
           * @param signature ed25519 signature over [newStatus, nonce]
           * @param ack Just an acknowledgement channel
           * @return Just an acknowledgement
           */
          contract @[controlPanel, "newStatus"](@newStatus, @signature, ack) = {
            // Account deletion is permanent (see below) because this
            // receive will block indefinitely when account is deleted
            for (@nonce <- nonceCh; @pubKey <- pubKeyCh){
              nonceCh!(nonce + 1)|
              pubKeyCh!(pubKey)|
              sigVerify!([newStatus, nonce], signature, pubKey, *goodSig, *ack)|
              for (_ <- goodSig; _ <- statusCh){
                statusCh!(newStatus)|
                ack!(0)
              }
            }
          }
          |

          /**
           * Control panel OCap has a method to delete the account. Any account
           * with no data on the status state channel is deleted.
           * @param signature ed25519 signature over nonce
           * @param ack Just an acknowledgement channel
           */
          contract @[controlPanel, "delete"](@signature, ack) = {
            for (@nonce <- nonceCh; @pubKey <- pubKeyCh){
              nonceCh!(nonce + 1)|
              pubKeyCh!(pubKey)|
              sigVerify!(nonce, signature, pubKey, *goodSig, *ack)|
              for (_ <- goodSig; _ <- statusCh){
                ack!(0)
              }
            }
          }
          |

          /**
           * Control panel OCap has a method for checking the status.
           * This may eventually be useful for creating revokable forwarders for friends
           * to follow your status, but the data will be onchain in the clear anyway,
           * so maybe this isn't so useful.
           * @param A return channel
           * @return A string of the currently set status
           * Check status (Useful for creating revokable forwarders)
           */
          contract@[controlPanel, "check"](result) = {

            for (@s <- statusCh) {

              statusCh!(s) |
              result!(s)
            }
          }
        }
      }
    }
  }
}
